{"version":3,"sources":["components/AddCategory.jsx","helpers/GetGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.jsx","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAc5C,OACI,sBAAMC,SATS,SAACC,GAChBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,IACxBR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAhBa,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,gDACiCC,UAAUH,GAD3C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGCA,EAAKC,OAHN,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QATtB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAC/B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCAHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECHb,SAACA,GAAa,IAAD,EACTd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAHuB,mBAC5BC,EAD4B,KACrBC,EADqB,KAyBnC,OAnBAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAEEH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAI1B,CAACpB,IASIqB,EDlBuBK,CAAa1B,GAA/Ba,EAJuB,EAI5BN,KAAYa,EAJgB,EAIhBA,QAGnB,OACI,qCACA,6BAAKpB,IACJoB,EAAS,wCAAe,KACzB,qBAAKJ,UAAU,YAAf,SAEYH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEjBxBgB,EAAa,WAAK,IAAD,EACQzC,mBAAS,CAAC,cADlB,mBACnB0C,EADmB,KACR3C,EADQ,KAK1B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ2C,EAAWnB,KAAI,SAACT,GAAD,OACV,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCXvC6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5c9ff99f.chunk.js","sourcesContent":["import {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n    const [inputValue, setinputValue] = useState('');\n\n    const handleInputChange= (e) => {\n        setinputValue(e.target.value)\n    }\n    const handleSubmit=(e) => {\n        e.preventDefault();\n        if(inputValue.trim().length>2){\n            setCategories(cats => [inputValue,...cats]);\n            setinputValue('');\n        }\n\n    }\n    return (\n        <form onSubmit={handleSubmit}> \n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes={\n    setCategories:PropTypes.func.isRequired\n}\n","export const getGifs = async(category)=>{\n    const url= `http://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=XDCLvLDtVUAEeSgGWi94WrCNw2AkGv7U`;\n    const resp = await fetch(url);\n    const {data}= await resp.json();\n\n    const gifs = data.map(img=>{\n        return{\n            id:img.id,\n            title:img.title,\n            url:img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n\n}","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport {useFetchGifs} from '../hooks/useFetchGifs';\n\nimport {GifGridItem} from './GifGridItem';\n// import {getGifs} from '../helpers/GetGifs';\n\nexport const GifGrid = ({category}) => {\n\n    // const [images, setImages] = useState([]);\n\n    const {data:images,loading} = useFetchGifs(category);\n\n\n    return (\n        <>\n        <h3>{category}</h3>\n        {loading? <p>Loading</p>:null}\n        <div className=\"card-grid\">\n            {\n                    images.map((img)=>(\n                        <GifGridItem \n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n\n        </div>\n        </>\n        \n    )\n}\n","import {useState,useEffect} from 'react';\nimport { getGifs } from \"../helpers/GetGifs\";\n\nexport const useFetchGifs=(category) =>{\n    const [state, setState] = useState({\n        data:[],\n        loading:true,\n    });\n\n    useEffect(()=>{\n        getGifs(category)\n            .then(imgs=>{\n                // setTimeout(()=>{\n                    setState({\n                        data:imgs,\n                        loading:false\n                    })\n                // },3000);\n            });\n    },[category])\n\n    // setTimeout(()=>{\n    //     setState({\n    //         data:[1,2,3,4],\n    //     loading:false,\n    //     })\n    // },3000);\n\n    return state;\n}\n\n","import {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp=()=>{\n    const [categories,setCategories]= useState(['One Punch',]);\n    const handleApp=()=>{\n        setCategories(['holamundo',...categories]);\n    }\n    return(\n        <>\n            <h1>GifExpertApp</h1>\n            <AddCategory setCategories={setCategories}/>\n            <hr />\n            <ol>\n                {\n                    categories.map((category)=>(\n                         <GifGrid key={category} category={category}/>\n                    ))\n                }\n            </ol>\n        </>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\nimport 'animate.css/animate.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}